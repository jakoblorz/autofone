package packets

// import (
// 	"bytes"
// 	"fmt"
// 	"io"
// 	"strings"
// 	"testing"

// 	"github.com/jakoblorz/metrikxd/constants"
// 	"github.com/stretchr/testify/assert"
// )

// type readerInterceptor struct {
// 	io.Reader
// 	n int
// }

// func (r *readerInterceptor) Read(p []byte) (n int, err error) {
// 	n, err = r.Reader.Read(p)
// 	r.n += n
// 	return
// }

// func Test_unmarshalToPacket(t *testing.T) {
// 	tests := []struct {
// 		id          uint8
// 		expectBytes int
// 		buffer      []byte
// 		target      interface{}
// 	}{
// 		{
// 			constants.PacketMotion,
// 			625,
// 			stobarr("11100101 111 1 1110 1 1 111 1111011 1000001 10000110 10100000 1100011 101011 100 10110110 10000100 1 1000001 11010010 0 0 0 11111111 11111111 1 100001 11001 10001 101010 10010 1010 11100 0 11111010 10110 100000 11100 1010000 0 1 1101 0 10000 10100010 11100010 10110011 111101 0 101111 1010000 101011 111110 0 10010011 111001 1110011 111110 0 10110001 1011011 10011000 111110 0 1101001 11101110 10110100 111110 0 100000 11110100 11010010 111110 0 110111 111111 11100110 111110 0 11100 1111011 11111101 111110 0 10010101 100001 1010 111111 10 11100100 10011101 11110 111111 0 1011110 11000011 110000 111111 0 1111001 11001110 111001 111111 0 1101000 11011110 1001001 111111 0 11001011 10011111 1010100 111111 0 1110 10111000 1101100 111111 0 110100 1010100 1111111 111111 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 101 1010 0 1 100001 10 11001 10 1001 1010 101 1 100000 1 11000 1 1111 1010 1010 10 100000 10 11000 10 10100 1010 1111 11 11101 1 11000 10 110111 1010 11110 101 11001 1 10111 1 1010111 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 101001 10100001 11101101 101 11110010 11111001 11101111 101 11110010 11 11110000 101 11110010 1010 1110 1 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"),
// 			&PacketMotionData{},
// 		},
// 		{
// 			constants.PacketSession,
// 			970,
// 			stobarr("11100101 111 1 1110 1 10 111 1111011 1000001 10000110 10100000 1100011 101011 100 11101011 1100111 1000011 1000010 1001101 101 0 0 11111111 11111111 11010100 110111 1 0 1111 11001 1 0 10000111 1011001 10010101 1111000 0 10010111 1111011 1000101 1000101 101 10000111 1000111 0 0 0 10000000 110 1111 0 10 10 0 0 0 0 0 10011 10 10 0 0 0 0 0 0 1100111 111100 1 0 11111 101001 0 0 0 0 0 0 0 10110101 1001001 1000100 100101 11010001 10001001 1000111 0 0 0 10000000 11 10000 0 1 0 0 0 0 0 0 11 10 10 0 0 0 0 0 0 0 0 0 0 11011010 1100010 0 0 0 0 0 0 10100000 1100000 1110110 1000011 10100000 1100000 1110110 1000011 0 0 0 10000000 10011 1 0 0 0 0 0 0 0 0 1111 0 111 0 0 0 0 0 0 10010010 10110110 1 0 10001011 11111111 1 0 10111111 10001010 10001000 11000100 0 10000001 10000110 1000011 11101110 1101100 10010011 1000110 0 0 0 10000000 10001 101 0 0 0 0 0 0 0 0 1010 0 111 0 0 0 0 0 0 11110 11110001 1 0 0 0 0 0 0 0 0 0 0 100 1100000 1000011 10101100 1100111 10110111 1000110 0 0 0 10000000 1111 110 0 1 0 0 11 0 0 1 101 0 111 0 0 0 0 0 0 11010101 1001110 1 0 11011 10010101 0 0 110110 1100000 0 0 10100000 1100011 10 1000101 10101010 111011 10000011 1000111 0 0 0 10000000 1010 1111 0 10 1 0 11 0 0 0 10001 10 10 0 0 0 0 0 0 11111010 1010000 1 0 11101010 101 1 0 1010110 1100000 1011000 10000010 1100000 101011 1011100 1000101 11101000 1001 10000110 1000111 0 0 0 10000000 1000 1111 0 1 10 0 0 0 0 0 100 10 10 0 0 0 0 0 0 11110010 1001110 1 0 11100101 10010000 0 0 11101010 1011111 0 0 1000000 10001110 11111011 1000100 101110 11 1110100 1000111 0 0 0 10000000 1100 1110 0 11 1 0 1001 0 0 0 1011 10 10 0 0 0 0 0 0 110111 111001 1 0 0 0 0 0 0 0 0 0 0 10110 110 1000011 1110101 10000010 1011010 1000111 0 0 0 10000000 1101 1101 1 1 0 0 11 0 0 0 10 0 111 1 0 0 0 0 0 1110111 111001 1 0 1100001 11100 1 0 100101 1011110 10010111 1111010 10000000 11010011 1101000 1000101 101001 1101111 10000110 1000111 0 0 0 10000000 111 1111 0 10 10 0 1111 0 0 0 110 10 10 0 0 0 0 0 0 101001 111001 1 0 10010001 1 0 0 0 0 0 0 0 11000000 11001010 1000001 1100111 1001010 10001000 1000111 0 0 0 10000000 101 10000 0 1 0 0 110 0 0 1 1000 10 10 0 0 0 0 0 0 110100 1000011 1 0 10100011 100111 0 0 0 0 0 0 0 1000111 111011 1000100 1001001 10110100 10001001 1000111 0 0 0 10000000 100 10000 0 1 0 0 11 0 0 10 111 10 10 0 0 0 0 0 0 0 0 0 0 1000 101111 1 0 111001 1110010 1100111 10011000 10000000 10101 110011 1000011 10000000 10101 110011 1000011 0 0 0 10000000 10010 1 0 0 0 1 1010 0 0 0 10010 0 111 0 0 0 0 0 0 1110001 111001 1 0 1 10001001 0 0 101 1011011 0 0 10000000 10110101 11111100 1000100 10010001 110000 10001100 1000111 0 0 0 10000000 1 10000 0 1 1 0 110 0 0 1 1 10 10 0 0 0 0 0 0 10110101 1110000 1 0 1110001 110110 1 0 1000001 1110110 1000110 10111000 10000000 10010001 101100 1000011 111101 10101010 11111111 1000110 0 0 0 10000000 1110 1000 0 1 0 0 10010 0 0 0 1100 100 111 0 0 0 0 0 0 1001000 10011111 0 0 0 0 0 0 0 0 0 0 10000000 10001101 1011001 1000011 10111111 1011010 10110111 1000110 0 0 0 10000000 10000 110 0 1 0 0 11 0 0 1 10000 100 111 0 0 0 0 0 0 10001000 1000100 1 0 1110101 101110 0 0 0 0 0 0 10000000 11011101 1011001 1000100 1110110 11110001 10001001 1000111 0 0 0 10000000 10 10000 0 1 0 0 11 0 0 0 1001 10 10 0 0 0 0 0 0 11111011 1001010 1 0 11101011 1000111 1 0 1110111 1011111 1001 10000011 10110000 1011011 10001100 1000101 110010 10110010 1111101 1000111 0 0 0 10000000 1011 1110 0 10 10 0 11 0 0 0 1110 10 10 0 0 0 0 0 0 11010100 111101 1 0 11101010 1101101 1 0 11010001 1011011 11100111 10011100 0 10101010 10010001 1000011 11111000 11001010 110110 1000111 0 0 0 10000000 10100 1010 1 1 0 0 1111 0 0 10 1101 0 101 1 0 0 0 0 0 11000 111100 1 0 10010001 11001000 0 0 1001000 1011011 0 0 11000000 11111001 111010 1000101 1011011 0 10000101 1000111 0 0 0 10000000 1001 1111 0 11 1 0 110 0 0 1 10100 10 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"),
// 			&PacketSessionData{},
// 		},
// 	}
// 	for _, tt := range tests {
// 		t.Run(fmt.Sprintf("integrity test for packet %d", tt.id), func(t *testing.T) {
// 			var (
// 				reader = bytes.NewBuffer(tt.buffer)
// 				writer = new(bytes.Buffer)
// 			)
// 			assert.NoError(t, unmarshalToPacket(reader, tt.target))
// 			assert.NoError(t, marshalToWriter(writer, tt.target))
// 			assert.Equal(t, tt.expectBytes, writer.Len())
// 		})
// 	}
// }

// func stob(s string) (b byte) {
// 	for i := 0; i < len(s); i++ {
// 		if c := s[i]; c == '1' {
// 			b |= (1 << (len(s) - i - 1))
// 		}
// 	}
// 	return b
// }

// func stobarr(s string) (b []byte) {
// 	c := strings.Split(s, " ")
// 	b = make([]byte, len(c))
// 	for i, elem := range c {
// 		b[i] = stob(elem)
// 	}
// 	return
// }
